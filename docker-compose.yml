version: "3.8"

services:
  postgres:
    image: postgres:14-alpine
    container_name: nodejs_kafka_db
    env_file:
      - .env
    ports:
      - "4242:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_kafka_data:/var/lib/postgresql/data
    networks:
      - nodejs_kafka_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: nodejs_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - nodejs_kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: nodejs_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - nodejs_kafka_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nodejs_kafka_producer
    env_file:
      - .env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - .:/user/src/app:delegated
      - kafka_app_node_modules:/user/src/app/node_modules
    command: npm run dev
    restart: always
    networks:
      - nodejs_kafka_network

  consumer:
    build:
      context: .
      dockerfile: consumer.Dockerfile
    container_name: nodejs_kafka_consumer
    env_file:
      -.env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - ./consumer.js:/user/src/app/consumer
    command: npm run dev
volumes:
  postgres_kafka_data:
  kafka_app_node_modules:

networks:
  nodejs_kafka_network:
    driver: bridge
